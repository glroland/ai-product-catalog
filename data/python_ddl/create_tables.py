"""Create Tables Script
"""
import os
import psycopg

sql = """
CREATE EXTENSION if not exists vector;

create table if not exists categories
(
	category_id integer primary key generated by default as identity,
	category_desc varchar(50)
);

create table if not exists brands
(
	brand_id integer primary key generated by default as identity,
	brand_desc varchar(50)
);

create table if not exists products
(
  product_id integer primary key generated by default as identity,
  sku varchar(50) not null,
  brand_id integer not null,
  product_name varchar(100) not null,
  product_desc varchar(1000) not null,
  size varchar(200),
  msrp float,
  category_id integer not null,
  
  CONSTRAINT fk_category
      FOREIGN KEY(category_id) 
        REFERENCES categories(category_id),
  
  CONSTRAINT fk_brand
      FOREIGN KEY(brand_id) 
        REFERENCES brands(brand_id)
);

create table if not exists product_embeddings
(
  product_id integer not null,
  model varchar(75) not null,
  text_segment varchar(5000) not null,
  embedding vector(768) not null,
  
  CONSTRAINT fk_product
      FOREIGN KEY(product_id) 
        REFERENCES products(product_id)
);

CREATE INDEX idx_product_embeddings 
          ON product_embeddings USING hnsw (embedding vector_l2_ops);

"""

def main():
    db_host = "tools.home.glroland.com"
    if "DB_HOST" in os.environ:
        db_host = os.environ["DB_HOST"]

    db_port = "5432"
    if "DB_PORT" in os.environ:
        db_port = os.environ["DB_PORT"]

    db_name = "ai_product_catalog"
    if "DB_NAME" in os.environ:
        db_name = os.environ["DB_NAME"]

    db_user = "ai_product_catalog"
    if "DB_USER" in os.environ:
        db_user = os.environ["DB_USER"]

    db_password = "ai_product_catalog123"
    if "DB_PASSWORD" in os.environ:
        db_password = os.environ["DB_PASSWORD"]

    db_conn_str = f"""host={db_host} port={db_port} dbname={db_name}
                      user={db_user} password={db_password}"""
    print (db_conn_str)

    with psycopg.connect(db_conn_str, autocommit=True) as db_connection:
        with db_connection.cursor() as c:
            c.execute(sql)


if __name__ == "__main__":
    main()
